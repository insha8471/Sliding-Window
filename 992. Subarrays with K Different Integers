Approach : Sliding Window + Hashmap

Time complexity : O(n)
Space comoplexity : O(n)

class Solution {
    public int helper(int[] nums, int k){
        Map<Integer, Integer> freq = new HashMap<>();

        int i = 0;
        int j = 0;
        int count = 0;
        while(i < nums.length){
            freq.put(nums[i],freq.getOrDefault(nums[i],0)+1);
            while(freq.size() > k){
                freq.put(nums[j], freq.getOrDefault(nums[j],0)-1);
                if(freq.get(nums[j]) == 0){
                    freq.remove(nums[j]);
                }
                j++;
            }
            count += i-j+1;
            i++;
        }
        return count;
    }
    public int subarraysWithKDistinct(int[] nums, int k) {
        return helper(nums,k) - helper(nums, k-1);
    }
}
